{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/users';\n  }\n  /** ✅ Register a new user with Unique ID Check */\n  register(user) {\n    return this.http.get(this.apiUrl).pipe(map(users => {\n      const existingUser = users.find(u => u.id === user.id); // Check if ID exists\n      if (existingUser) {\n        throw new Error('User ID already exists! Please choose a different ID.');\n      }\n      return user; // If ID is unique, proceed\n    }), switchMap(newUser => this.http.post(this.apiUrl, newUser)),\n    // Register the user\n    catchError(this.handleError) // Handle errors\n    );\n  }\n  /** ✅ Handle Errors */\n  handleError(error) {\n    if (error.status === 0) {\n      console.error('Network Error:', error.error);\n      return throwError(() => new Error('Network error! Please check your connection.'));\n    } else if (error.status === 400) {\n      return throwError(() => new Error('User ID already exists! Try a different one.'));\n    } else {\n      return throwError(() => new Error('Server error! Please try again later.'));\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;;;AAK3D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,6BAA6B;EAEP;EAEvC;EACAC,QAAQ,CAACC,IAAS;IAChB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CAC3CT,GAAG,CAAEU,KAAK,IAAI;MACZ,MAAMC,YAAY,GAAGD,KAAK,CAACE,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKR,IAAI,CAACQ,EAAE,CAAC,CAAC,CAAC;MAC1D,IAAIH,YAAY,EAAE;QAChB,MAAM,IAAII,KAAK,CAAC,uDAAuD,CAAC;;MAE1E,OAAOT,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,EACFL,SAAS,CAAEe,OAAO,IAAK,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAC,IAAI,CAACT,MAAM,EAAEQ,OAAO,CAAC,CAAC;IAAE;IAC9DjB,UAAU,CAAC,IAAI,CAACmB,WAAW,CAAC,CAAC;IAAA,CAC9B;EACH;EAEA;EACQA,WAAW,CAACC,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtBC,OAAO,CAACF,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACA,KAAK,CAAC;MAC5C,OAAOrB,UAAU,CAAC,MAAM,IAAIiB,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACnF,MAAM,IAAII,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;MAC/B,OAAOtB,UAAU,CAAC,MAAM,IAAIiB,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACnF,MAAM;MACL,OAAOjB,UAAU,CAAC,MAAM,IAAIiB,KAAK,CAAC,uCAAuC,CAAC,CAAC;;EAE/E;;AA9BWb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["throwError","catchError","map","switchMap","AuthService","constructor","http","register","user","get","apiUrl","pipe","users","existingUser","find","u","id","Error","newUser","post","handleError","error","status","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\yalla\\OneDrive\\Documents\\New folder\\Angular-Product-Inventory-Management-Solution-main\\src\\app\\core\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000/users';\n\n  constructor(private http: HttpClient) {}\n\n  /** ✅ Register a new user with Unique ID Check */\n  register(user: any): Observable<any> {\n    return this.http.get<any[]>(this.apiUrl).pipe(\n      map((users) => {\n        const existingUser = users.find((u) => u.id === user.id); // Check if ID exists\n        if (existingUser) {\n          throw new Error('User ID already exists! Please choose a different ID.');\n        }\n        return user; // If ID is unique, proceed\n      }),\n      switchMap((newUser) => this.http.post(this.apiUrl, newUser)), // Register the user\n      catchError(this.handleError) // Handle errors\n    );\n  }\n\n  /** ✅ Handle Errors */\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      console.error('Network Error:', error.error);\n      return throwError(() => new Error('Network error! Please check your connection.'));\n    } else if (error.status === 400) {\n      return throwError(() => new Error('User ID already exists! Try a different one.'));\n    } else {\n      return throwError(() => new Error('Server error! Please try again later.'));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}