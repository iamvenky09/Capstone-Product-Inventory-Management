{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  login(email, password) {\n    return this.http.get(`${this.apiUrl}/users`).pipe(map(users => {\n      const user = users.find(u => u.email === email && u.password === password);\n      if (user) {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        return true;\n      }\n      return false;\n    }), catchError(this.handleError) // ðŸ”´ Catch any HTTP errors\n    );\n  }\n\n  logout() {\n    localStorage.removeItem('currentUser');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('currentUser');\n  }\n  register(user) {\n    return this.http.get(`${this.apiUrl}/users`).pipe(map(users => {\n      // Check if email already exists\n      const existingUser = users.find(u => u.email === user.email);\n      if (existingUser) {\n        throw new Error('Email already exists! Please use a different email.');\n      }\n      // Assign a unique ID (max ID + 1)\n      const newUser = {\n        ...user,\n        id: users.length ? Math.max(...users.map(u => u.id)) + 1 : 1\n      };\n      return newUser;\n    }), switchMap(newUser => this.http.post(`${this.apiUrl}/users`, newUser)), catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      console.error('Network Error:', error.error);\n      return throwError(() => new Error('Network error! Please check your connection.'));\n    } else if (error.status >= 400 && error.status < 500) {\n      return throwError(() => new Error('Client-side error! Check your request.'));\n    } else {\n      return throwError(() => new Error('Server error! Please try again later.'));\n    }\n  }\n}\nAuthService.Éµfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ÉµÉµinject(i1.HttpClient));\n};\nAuthService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n  token: AuthService,\n  factory: AuthService.Éµfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,uBAAuB;EAEA;EAExCC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,QAAQ,CAAC,CAACC,IAAI,CACtDT,GAAG,CAAEU,KAAK,IAAI;MACZ,MAAMC,IAAI,GAAGD,KAAK,CAACE,IAAI,CACpBC,CAAM,IAAKA,CAAC,CAACR,KAAK,KAAKA,KAAK,IAAIQ,CAAC,CAACP,QAAQ,KAAKA,QAAQ,CACzD;MACD,IAAIK,IAAI,EAAE;QACRG,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;QACzD,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,EACFZ,UAAU,CAAC,IAAI,CAACmB,WAAW,CAAC,CAAC;IAAA,CAC9B;EACH;;EAEAC,MAAM;IACJL,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;EACxC;EAGAC,UAAU;IACR,OAAO,CAAC,CAACP,YAAY,CAACQ,OAAO,CAAC,aAAa,CAAC;EAC9C;EAEAC,QAAQ,CAACZ,IAAS;IAChB,OAAO,IAAI,CAACR,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,QAAQ,CAAC,CAACC,IAAI,CACtDT,GAAG,CAAEU,KAAK,IAAI;MACZ;MACA,MAAMc,YAAY,GAAGd,KAAK,CAACE,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACR,KAAK,KAAKM,IAAI,CAACN,KAAK,CAAC;MAC9D,IAAImB,YAAY,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;;MAGxE;MACA,MAAMC,OAAO,GAAG;QAAE,GAAGf,IAAI;QAAEgB,EAAE,EAAEjB,KAAK,CAACkB,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGpB,KAAK,CAACV,GAAG,CAACa,CAAC,IAAIA,CAAC,CAACc,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG;MAAC,CAAE;MAEzF,OAAOD,OAAO;IAChB,CAAC,CAAC,EACFK,SAAS,CAAEL,OAAO,IAAK,IAAI,CAACvB,IAAI,CAAC6B,IAAI,CAAC,GAAG,IAAI,CAACxB,MAAM,QAAQ,EAAEkB,OAAO,CAAC,CAAC,EACvE3B,UAAU,CAAC,IAAI,CAACmB,WAAW,CAAC,CAC7B;EACH;EAGQA,WAAW,CAACe,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtBC,OAAO,CAACF,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACA,KAAK,CAAC;MAC5C,OAAOnC,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACnF,MAAM,IAAIQ,KAAK,CAACC,MAAM,IAAI,GAAG,IAAID,KAAK,CAACC,MAAM,GAAG,GAAG,EAAE;MACpD,OAAOpC,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAAC,wCAAwC,CAAC,CAAC;KAC7E,MAAM;MACL,OAAO3B,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAAC,uCAAuC,CAAC,CAAC;;EAE/E;;AA3DWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmC,SAAXnC,WAAW;EAAAoC,YAFV;AAAM","names":["throwError","catchError","map","AuthService","constructor","http","login","email","password","get","apiUrl","pipe","users","user","find","u","localStorage","setItem","JSON","stringify","handleError","logout","removeItem","isLoggedIn","getItem","register","existingUser","Error","newUser","id","length","Math","max","switchMap","post","error","status","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\yalla\\OneDrive\\Documents\\New folder\\Angular-Product-Inventory-Management-Solution-main\\src\\app\\core\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000';\n\n  constructor(private http: HttpClient) { }\n\n  login(email: string, password: string): Observable<boolean> {\n    return this.http.get<any[]>(`${this.apiUrl}/users`).pipe(\n      map((users) => {\n        const user = users.find(\n          (u: any) => u.email === email && u.password === password\n        );\n        if (user) {\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          return true;\n        }\n        return false;\n      }),\n      catchError(this.handleError) // ðŸ”´ Catch any HTTP errors\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n  }\n\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('currentUser');\n  }\n\n  register(user: any): Observable<any> {\n    return this.http.get<any[]>(`${this.apiUrl}/users`).pipe(\n      map((users) => {\n        // Check if email already exists\n        const existingUser = users.find((u) => u.email === user.email);\n        if (existingUser) {\n          throw new Error('Email already exists! Please use a different email.');\n        }\n  \n        // Assign a unique ID (max ID + 1)\n        const newUser = { ...user, id: users.length ? Math.max(...users.map(u => u.id)) + 1 : 1 };\n  \n        return newUser;\n      }),\n      switchMap((newUser) => this.http.post(`${this.apiUrl}/users`, newUser)),\n      catchError(this.handleError)\n    );\n  }\n  \n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      console.error('Network Error:', error.error);\n      return throwError(() => new Error('Network error! Please check your connection.'));\n    } else if (error.status >= 400 && error.status < 500) {\n      return throwError(() => new Error('Client-side error! Check your request.'));\n    } else {\n      return throwError(() => new Error('Server error! Please try again later.'));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}